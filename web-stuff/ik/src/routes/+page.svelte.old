<main>
  <canvas id="canvas" width="600" height="600"></canvas>
  <div class="controls">
    <button>HELLO</button>
  </div>
</main>

<script>
// @ts-nocheck

  import { onMount } from "svelte";
  import { initBuffers } from "$lib/init-buffers.js";
  import { drawScene } from "$lib/draw-scene.js";

  let cubeRotation = 0.0;
  let deltaTime = 0;

  onMount(() => {
    const _canvas = document.querySelector("canvas");
    const gl = _canvas?.getContext("webgl2") || new WebGL2RenderingContext();
    if (gl === null) return;

    const vsSource = `
      attribute vec4 aVertexPosition;
      attribute vec4 aVertexColor;

      uniform mat4 uModelViewMatrix;
      uniform mat4 uProjectionMatrix;

      varying lowp vec4 vColor;

      void main(void) {
        gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;
        vColor = aVertexColor;
      }
    `; // vec4 is just for performance reasons, as it has to be converted to do maths w/ mat4, can really just be a vec2/vec3

    const fsSource = `
      varying lowp vec4 vColor;

      void main(void) {
        gl_FragColor = vColor;
      }
    `;

    const shaderProgram = initShaderProgram(gl, vsSource, fsSource);

    // Collect all the info needed to use the shader program.
    // Look up which attribute our shader program is using
    // for aVertexPosition and look up uniform locations.
    const programInfo = {
      program: shaderProgram,
      attribLocations: {
        vertexPosition: gl.getAttribLocation(shaderProgram, "aVertexPosition"),
        vertexColor: gl.getAttribLocation(shaderProgram, "aVertexColor"),
      },
      uniformLocations: {
        projectionMatrix: gl.getUniformLocation(shaderProgram, "uProjectionMatrix"),
        modelViewMatrix: gl.getUniformLocation(shaderProgram, "uModelViewMatrix"),
      },
    };
    
    // Here's where we call the routine that builds all the
    // objects we'll be drawing.
    const buffers = initBuffers(gl, cubeRotation);

    let then = 0;
    const instancesArray = getInstancesArray();

    // Draw the scene repeatedly
    function render(now) {
      now *= 0.001; // convert to seconds
      deltaTime = now - then;
      then = now;

      drawScene(gl, programInfo, buffers, cubeRotation, instancesArray);
      cubeRotation += deltaTime;

      requestAnimationFrame(render);
    }
    requestAnimationFrame(render);

  });

  //
  // Initialize a shader program, so WebGL knows how to draw our data
  //
  function initShaderProgram(gl, vsSource, fsSource) {
    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);
    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);

    // Create the shader program

    const shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
    gl.linkProgram(shaderProgram);

    // If creating the shader program failed, alert

    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
      alert(
        `Unable to initialize the shader program: ${gl.getProgramInfoLog(
          shaderProgram,
        )}`,
      );
      return null;
    }

    return shaderProgram;
  }

  //
  // creates a shader of the given type, uploads the source and
  // compiles it.
  //
  function loadShader(gl, type, source) {
    const shader = gl.createShader(type);

    // Send the source to the shader object

    gl.shaderSource(shader, source);

    // Compile the shader program

    gl.compileShader(shader);

    // See if it compiled successfully

    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      alert(
        `An error occurred compiling the shaders: ${gl.getShaderInfoLog(shader)}`,
      );
      gl.deleteShader(shader);
      return null;
    }

    return shader;
  }

  function getInstancesArray() {
    return [
      0, 0, 0,
      0, 0, 1,
      0, 0, 2,
      0, 0, 3,
    ];
  }
</script>

<style>
  :global(*) {
    padding: 0;
    margin: 0;
  }

  :global(html), :global(body), main {
    height: 100%;
    width: 100%;
  }

  #canvas {
    height: 100%;
    max-width: 100%;
  }

  main {
    background: #111;
    display: grid;
    grid-template-rows: 1fr 5rem;
    place-items: center;
  }

  @media screen and (width > 100vh) {
    main {
      grid-template-rows: 1fr;
      grid-template-columns: 1fr 20rem
    }
  }
</style>
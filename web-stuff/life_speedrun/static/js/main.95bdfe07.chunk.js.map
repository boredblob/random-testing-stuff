{"version":3,"sources":["initialGrid.js","App.js","reportWebVitals.js","index.js"],"names":["initialGridTypes","white_noise","generate","res","arr","Array","y","x","Math","random","displayText","blue_noise","pds","FastPoissonDiskSampling","shape","radius","tries","fill","points","p","length","floor","every_7th_pixel","generateInitialGrid","initialGridType","initialWindowWidth","min","window","innerWidth","theme","createMuiTheme","palette","type","currentGrid","currentGridSize","App","useState","setInitialGridType","resolution","setResolution","grid","setGrid","running","setRunning","canvasRef","useRef","resetGrid","useEffect","ctx","current","getContext","putImageData","gridSize","data","createImageData","i","gridToImageData","ThemeProvider","className","ref","width","height","FormControl","variant","InputLabel","htmlFor","id","Select","color","labelId","label","value","onChange","e","target","MenuItem","Object","entries","map","key","Button","onClick","ms","initialGrid","start","document","timeline","currentTime","performance","now","scheduleFrame","time","elapsed","roundedElapsed","round","setTimeout","requestAnimationFrame","newGrid","sum","sumCellNeighbours","cell","iterateLife","startSimulation","dx","dy","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.95bdfe07.chunk.js","sourcesContent":["import FastPoissonDiskSampling from 'fast-2d-poisson-disk-sampling';\r\n\r\nexport const initialGridTypes = {\r\n  white_noise: {\r\n    generate: generateWhiteNoise,\r\n    displayText: \"White Noise\"\r\n  },\r\n  blue_noise: {\r\n    generate: generateBlueNoise,\r\n    displayText: \"Blue Noise\"\r\n  },\r\n  every_7th_pixel: {\r\n    generate: generateEvery7thPixel,\r\n    displayText: \"Every 7th Pixel\"\r\n  }\r\n};\r\n\r\nexport function generateInitialGrid(initialGridType, res) {\r\n  return initialGridTypes[initialGridType].generate(res);\r\n}\r\n\r\nfunction generateWhiteNoise(res) {\r\n  let arr = Array(res*res);\r\n  for (let y = 0; y < res; y++) {\r\n    for (let x = 0; x < res; x++) {\r\n      arr[y*res+x] = Math.random() < 0.07;\r\n    }\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction generateEvery7thPixel(res) {\r\n  let arr = Array(res*res);\r\n  for (let y = 0; y < res; y++) {\r\n    for (let x = 0; x < res; x++) {\r\n      arr[y*res+x] = (y*res+x)%7 === 0;\r\n    }\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction generateBlueNoise(res) {\r\n  let pds = new FastPoissonDiskSampling({\r\n    shape: [res, res],\r\n    radius: 2,\r\n    tries: 30\r\n  });\r\n  let arr = Array(res*res).fill(false);\r\n  let points = pds.fill();\r\n  for (let p = 0; p < points.length; p++) {\r\n    arr[Math.floor(points[p][1])*res+Math.floor(points[p][0])] = true;\r\n  }\r\n  return arr;\r\n}","import './App.css';\nimport { initialGridTypes, generateInitialGrid } from './initialGrid.js';\nimport { ThemeProvider, Button, Select, MenuItem, InputLabel, FormControl } from '@material-ui/core';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { useRef, useState, useEffect } from 'react';\n\nconst initialWindowWidth = Math.min(512, Math.floor(window.innerWidth));\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  }\n});\nlet currentGrid = null;\nlet currentGridSize = null;\n\nfunction App() {\n  const [initialGridType, setInitialGridType] = useState(\"white_noise\");\n  const [resolution, setResolution] = useState(initialWindowWidth);\n  const [grid, setGrid] = useState(generateInitialGrid(\"white_noise\", resolution));\n  const [running, setRunning] = useState(false);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.putImageData(gridToImageData(ctx, grid, resolution), 0, 0);\n  }, [grid, resolution]);\n  useEffect(resetGrid, [initialGridType, resolution]);\n  function resetGrid() {\n    currentGrid = generateInitialGrid(initialGridType, resolution);\n    currentGridSize = resolution;\n    setGrid(currentGrid);\n  }\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"container\">\n        <canvas ref={canvasRef} width={resolution} height={resolution}></canvas>\n        <div className=\"controls\">\n        <FormControl className=\"select\"  variant=\"outlined\">\n            <InputLabel htmlFor=\"resolution-select\" id=\"resolution-select-label\">Resolution</InputLabel>\n            <Select color=\"primary\" labelId=\"resolution-select-label\" id=\"resolution-select\" label=\"Resolution\" value={resolution} onChange={e => {\n              if (typeof e.target.value === \"number\") setResolution(e.target.value);\n            }}>\n              <MenuItem value={Math.min(512, initialWindowWidth)}>Auto ({initialWindowWidth})</MenuItem>\n              <MenuItem value={64}>64</MenuItem>\n              <MenuItem value={128}>128</MenuItem>\n              <MenuItem value={256}>256</MenuItem>\n              <MenuItem value={512}>512</MenuItem>\n            </Select>\n          </FormControl>\n          <FormControl className=\"select\"  variant=\"outlined\">\n            <InputLabel htmlFor=\"initial-grid-select\" id=\"initial-grid-select-label\">Starting Grid</InputLabel>\n            <Select color=\"primary\" labelId=\"initial-grid-select-label\" id=\"initial-grid-select\" label=\"Starting Grid\" value={initialGridType}\n              onChange={e => {\n                if ([e.target.value]) setInitialGridType(e.target.value);\n            }}>\n              {\n                Object.entries(initialGridTypes).map(\n                  ([key, value]) => <MenuItem key={key} value={key}>{value.displayText}</MenuItem>\n                )\n              }\n            </Select>\n          </FormControl>\n        </div>\n        <Button variant=\"contained\" color=\"primary\" onClick={() => {\n          if (running) return resetGrid();\n          startSimulation(1000/24, grid, setGrid, resolution);\n          setRunning(true);\n        }}>Simulate</Button>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n\nfunction startSimulation(ms, initialGrid, setGrid, gridSize) {\n  const start = document.timeline ? document.timeline.currentTime : performance.now();\n  currentGrid = initialGrid;\n  currentGridSize = gridSize;\n  \n  function scheduleFrame(time) {\n    const elapsed = time - start;\n    const roundedElapsed = Math.round(elapsed / ms) * ms;\n    const targetNext = start + roundedElapsed + ms;\n    const delay = targetNext - time;\n    setTimeout(() => requestAnimationFrame(() => {\n      currentGrid = iterateLife(currentGrid, currentGridSize);\n      setGrid(currentGrid);\n      scheduleFrame(performance.now());\n    }), delay);\n  }\n\n  scheduleFrame(start);\n}\n\nfunction iterateLife(grid, gridSize) {\n  let newGrid = Array(gridSize*gridSize);\n  for (let y = 0; y < gridSize; y++) {\n    for (let x = 0; x < gridSize; x++) {\n      const sum = sumCellNeighbours(grid, gridSize, x, y);\n      const cell = grid[y*gridSize+x];\n      if (cell) {\n        newGrid[y*gridSize+x] = (sum === 2 || sum === 3);\n      } else {\n        newGrid[y*gridSize+x] = (sum === 3);\n      }\n    }\n  }\n  return newGrid;\n}\n\nfunction sumCellNeighbours(grid, gridSize, dx, dy) {\n  let sum = 0;\n  for (let y = dy-1; y <= dy+1; y++) {\n    for (let x = dx-1; x <= dx+1; x++) {\n      let cx = ((x % gridSize) + gridSize) % gridSize;\n      let cy = ((y % gridSize) + gridSize) % gridSize;\n      sum += grid[cy*gridSize+cx];\n    }\n  }\n  return sum - grid[dy*gridSize+dx];\n}\n\n// 2d boolean array to rgb image data for canvas\nfunction gridToImageData(ctx, grid, gridSize) {\n  const data = ctx.createImageData(gridSize, gridSize);\n  for (let i = 0; i < gridSize*gridSize; i++) {\n    data.data[4*i+0] = grid[i]*255;\n    data.data[4*i+1] = grid[i]*255;\n    data.data[4*i+2] = grid[i]*255;\n    data.data[4*i+3] = 255;\n  }\n  return data;\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","tree","setTree","window","history","state","URLSearchParams","URL","location","href","search","get","dir","setDir","useEffect","fetch","cache","then","response","ok","json","responseTree","onpopstate","className","src","alt","Explorer","elements","currentDirChildren","treeDepth","split","length","i","path","startsWith","push","parseTree","map","f","type","Folder","folder","sha","File","file","unshift","onClick","back","folderName","pop","pushState","encodeURIComponent","fileSizeToString","size","fileSize","pow","Math","max","min","floor","log10","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1758bb78.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\n\nexport default function App() {\n  const [tree, setTree] = useState(null);\n  const [dir, setDir] = useState(\n    window.history.state ||\n    new URLSearchParams(new URL(window.location.href).search).get(\"dir\") ||\n    \"web-stuff\"\n  );\n  useEffect(() => {\n    fetch(\"https://api.omer.ws/tree\", {cache: 'no-cache'})\n    .then(response => {\n      if (response.ok) {\n        return response;\n      }\n    })\n    .then(response => response.json())\n    .then(responseTree => {\n      setTree(responseTree);\n    });\n  }, []);\n  window.onpopstate = () => {\n    setDir(\n      window.history.state ||\n      new URLSearchParams(new URL(window.location.href).search).get(\"dir\") ||\n      \"web-stuff\"\n    );\n  };\n  return (\n    <div className=\"app\">\n      <header>\n        <a href=\"/\">\n          <img src=\"/favicons/icon-144.png\" alt=\"Logo\"/>  \n        </a>\n      </header>\n      <Explorer tree={tree} dir={dir} setDir={setDir}></Explorer>\n    </div>\n  );\n}\n\nfunction Explorer({tree, dir, setDir}) {\n  if (tree === null) return <div></div>;\n  let elements = parseTree(tree, dir).map(f => {\n    if (f.type === \"tree\") return <Folder key={f.sha} folder={f} setDir={setDir}></Folder>\n    else return <File key={f.sha} file={f} dir={dir}></File>\n  });\n  // add back button if not in root\n  if (dir !== \"web-stuff\") elements.unshift(\n    <div key=\"back\" className=\"item\" onClick={() => window.history.back()}>\n      <img className=\"item-icon\" src=\"/icons/back.svg\" alt=\"back\"></img>\n    </div>\n  );\n  return (\n    <main className=\"explorer\">\n      {elements}\n    </main>\n  );\n}\n\nfunction Folder({folder, setDir}) {\n  const folderName = folder.path.split(\"/\").pop();\n  return (\n    <div className=\"item\" onClick={() => {\n      setDir(folder.path);\n      window.history.pushState(folder.path, \"Testing - \" + folderName, `?dir=${encodeURIComponent(folder.path)}`);\n    }}>\n      <img className=\"item-icon\" src=\"/icons/folder.svg\" alt=\"folder\"></img>\n      <span className=\"item-name\">{folderName}</span>\n    </div>\n  );\n}\n\nfunction File({file, dir}) {\n  return (\n    <a href={\"/\" + file.path}>\n      <div className=\"item\">\n        <img className=\"item-icon\" src=\"/icons/file.svg\" alt=\"file\"></img>\n        <span className=\"item-name\">{file.path.split(\"/\").pop()}</span>\n        <span className=\"item-size\">{fileSizeToString(file.size)}</span>\n      </div>\n    </a>\n  );\n}\n\nfunction parseTree(tree, dir) {\n  const currentDirChildren = [];\n  const treeDepth = dir.split(\"/\").length + 1;\n  for (let i = 0; i < tree.length; i++) {\n    // if on same branch at same depth then add to array for display\n    if (tree[i].path.startsWith(dir) && tree[i].path.split(\"/\").length === treeDepth) {\n      currentDirChildren.push(tree[i]);\n    }\n  };\n  return currentDirChildren;\n}\n\nfunction fileSizeToString(fileSize) {\n  const units = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\"];\n  const pow = Math.max(Math.min(Math.floor(Math.log10(fileSize) / 3), 5), 0);\n  return Math.round((fileSize / (1000**pow))*100)/100 + units[pow];\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
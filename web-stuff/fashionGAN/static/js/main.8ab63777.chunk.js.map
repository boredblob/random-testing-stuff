{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ModelView","props","useState","model","setModel","imageURL","setImageURL","useEffect","a","tf","loadModel","className","style","width","height","image","predict","seed","imageCanvas","document","createElement","toPixels","reshape","div","add","then","toDataURL","dispose","src","alt","getRandomValues","arr","i","push","Math","random","Sliders","Slider","color","orientation","min","max","step","defaultValue","onChangeCommitted","e","val","updateSeed","type","payload","key","value","length","seedReducer","action","Array","from","fill","Error","App","useReducer","JSON","stringify","Button","variant","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","title","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8ab63777.chunk.js","sourcesContent":["import './App.css';\nimport { Button, Slider } from '@material-ui/core';\nimport * as tf from '@tensorflow/tfjs';\nimport { useEffect, useReducer, useState } from \"react\";\n\nconst number_of_switches = 100;\n\nfunction App() {\n  const [seed, updateSeed] = useReducer(seedReducer, getRandomValues(), getRandomValues);\n  return (\n    <main className=\"container\">\n      <div className=\"modelView-container\">\n        <ModelView key={JSON.stringify(seed)} seed={seed} width={400} height={400}></ModelView>\n      </div>\n      <div className=\"button-container\">\n        <Button variant=\"contained\" color=\"primary\" onClick={() => {updateSeed({type: \"reset\"})}}>Set Random</Button>\n        <Button variant=\"contained\" color=\"primary\" onClick={() => {updateSeed({type: \"zero\"})}}>Set Zero</Button>\n      </div>\n      <div className=\"sliders-container\">\n        <Sliders key={JSON.stringify(seed)} seed={seed} updateSeed={updateSeed}></Sliders>\n      </div>\n    </main>\n  );\n}\n\nfunction ModelView(props) {\n  const [model, setModel] = useState(null);\n  const [imageURL, setImageURL] = useState(\"\");\n  useEffect(() => {\n    async function loadModel() {\n      setModel(await tf.loadLayersModel(\"./model/model.json\"));\n    }\n    loadModel();\n  }, []);\n  if (model == null) {\n    return (\n      <div className=\"placeholder\" style={{width: props.width + \"px\", height: props.height + \"px\"}}></div>\n    )\n  } else {\n    const image = model.predict(tf.tensor(props.seed, [1, 100]));\n    const imageCanvas = document.createElement(\"canvas\");\n    imageCanvas.width = props.width;\n    imageCanvas.height = props.height;\n    tf.browser.toPixels(image.reshape([28, 28, 1]).div(2).add(0.5), imageCanvas).then(() => {\n      setImageURL(imageCanvas.toDataURL());\n      image.dispose();\n    });\n    return (\n      <img className=\"modelView\" src={imageURL} alt=\"\" width={props.width} height={props.height}></img>\n    );\n  }\n}\n\nfunction getRandomValues() {\n  let arr = [];\n  for (let i = 0; i < number_of_switches; i++) {\n    arr.push(Math.random())\n  }\n  return arr;\n}\n\nfunction Sliders(props) {\n  let arr = [];\n  for (let i = 0; i < props.seed.length; i++) {\n    arr.push((\n      <Slider className=\"slider\" color=\"primary\" key={i} orientation=\"vertical\" min={0} max={1} step={0.00000001} defaultValue={props.seed[i]} onChangeCommitted={(e, val) => {\n        props.updateSeed({type: \"update\", payload: {key: i, value: val}});\n      }}></Slider>\n    ))\n  }\n  return arr;\n}\n\nfunction seedReducer(seed, action) {\n  switch (action.type) {\n    case \"update\":\n      seed[action.payload.key] = action.payload.value;\n      return Array.from(seed);\n    case \"reset\":\n      return getRandomValues();\n    case \"zero\":\n      return new Array(100).fill(0);\n    default:\n      throw new Error();\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\ndocument.title=\"FashionGAN\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
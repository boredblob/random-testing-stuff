{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["gridWidth","gridHeight","gridSquareWidth","snakeSegments","snakeDirection","nextDirection","directionToVector","apples","running","App","canvasRef","useRef","useEffect","ctx","current","getContext","document","onkeydown","e","code","resetSnake","setUpKeyboardControls","spawnApple","className","ref","width","height","startGameLoop","ms","start","timeline","currentTime","performance","now","scheduleFrame","time","elapsed","roundedElapsed","Math","round","setTimeout","requestAnimationFrame","direction","currentDirection","snakeHeadPos","length","appleEaten","i","splice","extendSnake","newHeadPos","shift","push","moveSnake","console","log","fillStyle","y","x","fillGridSquare","brightness","floor","draw","snakeIteration","generatedNewApple","newApple","random","gridX","gridY","gap","fillRect","centreX","centreY","ceil","snakeInitialLength","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5ee7246f.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect, useRef } from 'react';\n\nconst gridWidth = 30;\nconst gridHeight = 20;\nconst gridSquareWidth = 25;\nconst gridGap = 1;\nconst fps = 10;\nconst snakeInitialLength = 3;\nlet snakeSegments = [];\nlet snakeDirection = 1;\nlet nextDirection = 1;\nconst directionToVector = [\n  [0, -1],\n  [1, 0],\n  [0, 1],\n  [-1, 0]\n];\nlet apples = [];\nlet running = false;\n\nexport default function App() {\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    setUpKeyboardControls(ctx);\n    spawnApple();\n    resetSnake(ctx);\n  }, []);\n  return (\n    <div className=\"container\">\n      <canvas ref={canvasRef} width={gridWidth*25} height={gridHeight*25}></canvas>\n    </div>\n  );\n}\n\nfunction startGameLoop(ms, ctx) {\n  const start = document.timeline ? document.timeline.currentTime : performance.now();\n  \n  function scheduleFrame(time) {\n    const elapsed = time - start;\n    const roundedElapsed = Math.round(elapsed / ms) * ms;\n    const targetNext = start + roundedElapsed + ms;\n    const delay = targetNext - time;\n    setTimeout(() => requestAnimationFrame(() => {\n      running = false;\n      if (!snakeIteration(ctx)) {\n        running = true;\n        scheduleFrame(performance.now());\n      }\n    }), delay);\n  }\n\n  scheduleFrame(start);\n}\n\nfunction snakeIteration(ctx) {\n  snakeDirection = validateDirection(nextDirection);\n  nextDirection = snakeDirection;\n  const currentDirection = directionToVector[snakeDirection];\n  let snakeHeadPos = snakeSegments[snakeSegments.length-1];\n  let appleEaten = false;\n  \n  // monch monch if inside apple\n  for (let i = 0; i < apples.length; i++) {\n    if (\n      snakeHeadPos[0] === apples[i][0] &&\n      snakeHeadPos[1] === apples[i][1]\n    ) {\n      appleEaten = true;\n      apples.splice(i, 1);\n      spawnApple();\n    }\n  }\n  snakeHeadPos = moveSnake(currentDirection, appleEaten);\n\n  // end game if snake has crashed into itself\n  for (let i = 0; i < snakeSegments.length - 1; i++) {\n    if (\n      snakeHeadPos[0] === snakeSegments[i][0] &&\n      snakeHeadPos[1] === snakeSegments[i][1]\n    ) {\n      console.log(\"game over\");\n      return true;\n    }\n  }\n\n   // end game if snake is outside grid bounds\n  if (\n    snakeHeadPos[0] > gridWidth ||\n    snakeHeadPos[0] < 0 ||\n    snakeHeadPos[1] > gridHeight ||\n    snakeHeadPos[1] < 0\n  ) {\n    console.log(\"game over\");\n    return true;\n  };\n  draw(ctx);\n  return false;\n}\n\nfunction moveSnake(direction, extendSnake = false) {\n  const snakeHeadPos = snakeSegments[snakeSegments.length-1];\n  const newHeadPos = [\n    snakeHeadPos[0] + direction[0],\n    snakeHeadPos[1] + direction[1]\n  ];\n  if (!extendSnake) snakeSegments.shift();\n  snakeSegments.push(newHeadPos);\n  return newHeadPos;\n}\n\nfunction spawnApple() {\n  let generatedNewApple = false;\n  let newApple = [];\n  while (!generatedNewApple) {\n    generatedNewApple = true;\n    newApple = [\n      Math.floor(Math.random() * gridWidth),\n      Math.floor(Math.random() * gridHeight)\n    ];\n    for (let i = 0; i < snakeSegments.length; i++) {\n      if (\n        newApple[0] === snakeSegments[i][0] &&\n        newApple[1] === snakeSegments[i][1]\n      ) {\n        generatedNewApple = false;\n      }\n    }\n  }\n  apples.push(newApple);\n}\n\nfunction draw(ctx) {\n  ctx.fillStyle = \"#222222\"; // background\n  for (let y = 0; y < gridHeight; y++) {\n    for (let x = 0; x < gridWidth; x++) {\n      fillGridSquare(ctx, x, y, gridSquareWidth, gridGap);\n    }\n  }\n  ctx.fillStyle = \"#981815\"; // apples\n  for (let i = 0; i < apples.length; i++) {\n    fillGridSquare(ctx, apples[i][0], apples[i][1], gridSquareWidth, gridGap);\n  }\n  // fill snake with gradient from head\n  for (let i = 0; i < snakeSegments.length; i++) {\n    const brightness = Math.floor(102 + (255-102) * i / (snakeSegments.length-1));\n    ctx.fillStyle = `rgb(${brightness}, ${brightness}, ${brightness})`;\n    fillGridSquare(ctx, snakeSegments[i][0], snakeSegments[i][1], gridSquareWidth, gridGap);\n  }\n}\n\nfunction fillGridSquare(ctx, gridX, gridY, gridSquareWidth, gap) {\n  ctx.fillRect(\n    gridX*gridSquareWidth+gap,\n    gridY*gridSquareWidth+gap,\n    gridSquareWidth-gap*2,\n    gridSquareWidth-gap*2\n  );\n}\n\nfunction setUpKeyboardControls(ctx) {\n  document.onkeydown = e => {\n    switch (e.code) {\n      case \"ArrowUp\":\n        nextDirection = 0;\n        break;\n      case \"ArrowRight\":\n        nextDirection = 1;\n        break;\n      case \"ArrowDown\":\n        nextDirection = 2;\n        break;          \n      case \"ArrowLeft\":\n        nextDirection = 3;\n        break;\n      case \"Space\":\n        resetSnake(ctx);\n        break;\n      case \"Enter\":\n        resetSnake(ctx);\n        break;\n      default:\n        break;\n    }\n  };\n}\n\nfunction validateDirection(direction) {\n  return (snakeDirection % 2 === direction % 2) ? snakeDirection : direction;\n}\n\nfunction resetSnake(ctx) {\n  if (!running) {\n    const centreX = Math.floor(gridWidth / 2);\n    const centreY = Math.floor(gridHeight / 2);\n    snakeSegments = [];\n    for (let i = 0; i < snakeInitialLength; i++) {\n      snakeSegments.push([centreX+(i-Math.ceil(snakeInitialLength/2)), centreY]);\n    }\n    snakeDirection = 1;\n    startGameLoop(1000/fps, ctx);\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["resolution","theme","createMuiTheme","palette","type","App","useState","generateInitialGrid","grid","setGrid","running","setRunning","canvasRef","useRef","useEffect","ctx","current","getContext","putImageData","data","createImageData","y","x","i","gridToImageData","ThemeProvider","className","ref","width","height","Button","variant","color","onClick","_","ms","start","document","timeline","currentTime","performance","now","currentGrid","scheduleFrame","time","elapsed","roundedElapsed","Math","round","delay","setTimeout","requestAnimationFrame","newGrid","Array","sum","sumNeighbours","cell","iterateLife","simulate","arr","random","dx","dy","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ee00dac2.chunk.js","sourcesContent":["import './App.css';\nimport { ThemeProvider, Button } from '@material-ui/core'\nimport { createMuiTheme } from '@material-ui/core/styles'\nimport { useRef, useState, useEffect } from 'react';\n\nconst resolution = 800;\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  }\n});\n\nfunction App() {\n  const [grid, setGrid] = useState(generateInitialGrid);\n  const [running, setRunning] = useState(false);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.putImageData(gridToImageData(ctx, grid), 0, 0);\n  }, [grid]);\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"container\">\n        <canvas ref={canvasRef} width={resolution} height={resolution}></canvas>\n        <Button variant=\"contained\" color=\"primary\" onClick={_ => {\n          if (running) return;\n          simulate(1000/24, grid, setGrid);\n          setRunning(true);\n        }}>Simulate</Button>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n\nfunction simulate(ms, grid, setGrid) {\n  const start = document.timeline ? document.timeline.currentTime : performance.now();\n  let currentGrid = grid;\n\n  function scheduleFrame(time) {\n    const elapsed = time - start;\n    const roundedElapsed = Math.round(elapsed / ms) * ms;\n    const targetNext = start + roundedElapsed + ms;\n    const delay = targetNext - performance.now();\n    setTimeout(() => requestAnimationFrame(() => {\n      currentGrid = iterateLife(currentGrid);\n      setGrid(currentGrid);\n      scheduleFrame(time);\n    }), delay);\n  }\n\n  scheduleFrame(start);\n}\n\nfunction generateInitialGrid() {\n  let arr = Array(resolution*resolution);\n  for (let y = 0; y < resolution; y++) {\n    for (let x = 0; x < resolution; x++) {\n      arr[y*resolution+x] = Math.random() < 0.5;\n    }\n  }\n  return arr;\n}\n\nfunction iterateLife(grid) {\n  let newGrid = Array(resolution*resolution);\n  for (let y = 0; y < resolution; y++) {\n    for (let x = 0; x < resolution; x++) {\n      const sum = sumNeighbours(grid, x, y);\n      const cell = grid[y*resolution+x];\n      if (cell) {\n        newGrid[y*resolution+x] = (sum === 2 || sum === 3);\n      } else {\n        newGrid[y*resolution+x] = (sum === 3);\n      }\n    }\n  }\n  return newGrid;\n}\n\nfunction sumNeighbours(grid, dx, dy) {\n  let sum = 0;\n  for (let y = dy-1; y < dy+2; y++) {\n    for (let x = dx-1; x < dx+2; x++) {\n      let cx = ((x % resolution) + resolution) % resolution;\n      let cy = ((y % resolution) + resolution) % resolution;\n      sum += grid[cy*resolution+cx];\n    }\n  }\n  return sum - grid[dy*resolution+dx];\n}\n\nfunction gridToImageData(ctx, grid) {\n  const data = ctx.createImageData(resolution, resolution);\n  for (let y = 0; y < resolution; y++) {\n    for (let x = 0; x < resolution; x++) {\n      let i = y*resolution+x;\n      data.data[4*i+0] = grid[i]*255;\n      data.data[4*i+1] = grid[i]*255;\n      data.data[4*i+2] = grid[i]*255;\n      data.data[4*i+3] = 255;\n    }\n  }\n  return data;\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
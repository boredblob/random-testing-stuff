{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["theme","createMuiTheme","palette","type","App","useState","selectedNumber","setSelectedNumber","ThemeProvider","className","style","gridTemplateColumns","DobbleCards","width","selected","TextField","value","onChange","e","Math","min","parseInt","target","props","cards","arr","Array","i","gradient","startX","y","push","x","j","matches","k","includes","alert","generateDobble","cardsArr","length","ceil","sqrt","DobbleIcons","icons","iconsArr","iconColour","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAMMA,EAAQC,YAAe,CAC3BC,QAAS,CACPC,KAAM,UAIK,SAASC,IACtB,MAA4CC,mBAAS,MAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,OACE,cAACC,EAAA,EAAD,CAAeR,MAAOA,EAAtB,SACE,sBAAKS,UAAU,YAAf,UACE,qBAAKA,UAAU,cAAcC,MAAO,CAACC,oBAAoB,UAAD,OAZlD,EAYkD,WAAxD,SACE,cAACC,EAAD,CAAaC,MAbT,EAauBC,SAAUR,MAEvC,cAACS,EAAA,EAAD,CAAWC,MAAOV,GAAkB,GAAIW,SAAU,SAAAC,GAChDX,EAAkBY,KAAKC,IAAIC,SAASH,EAAEI,OAAON,OAAQ,KAAsB,cAOrF,SAASJ,EAAYW,GAGnB,IAFA,IAAMC,EAuBR,SAAwBX,GAEtB,IADA,IAAIY,EAAM,IAAIC,MAAMb,EAAMA,GACjBc,EAAI,EAAGA,EAAId,EAAMA,EAAOc,IAC/BF,EAAIE,GAAK,GAEX,IAAK,IAAIC,EAAW,EAAGA,EAAWf,EAAOe,IACvC,IAAK,IAAIC,EAAS,EAAGA,EAAShB,EAAOgB,IACnC,IAAK,IAAIC,EAAI,EAAGA,EAAIjB,EAAOiB,IAAK,CAE9BL,EAAIK,EAAEjB,GADGgB,EAAOD,EAASE,GAAKjB,GACfkB,KAAMH,EAASf,EAAOgB,GAI3C,IAAK,IAAIC,EAAI,EAAGA,EAAIjB,EAAOiB,IACzB,IAAK,IAAIE,EAAI,EAAGA,EAAInB,EAAOmB,IACzBP,EAAIK,EAAEjB,EAAMmB,GAAGD,KAAMlB,EAAMA,EAAOiB,GAGtC,IAAK,IAAIH,EAAI,EAAGA,EAAId,EAAMA,EAAOc,IAC/B,IAAK,IAAIM,EAAIN,EAAE,EAAGM,EAAIpB,EAAMA,EAAOoB,IAAK,CAEtC,IADA,IAAIC,EAAU,EACLC,EAAI,EAAGA,GAAKtB,EAAM,GAAGA,EAAOsB,IAC/BV,EAAIE,GAAGS,SAASD,IAAMV,EAAIQ,GAAGG,SAASD,IAAID,IAE5CA,EAAU,GAAGG,MAAM,gBAG3B,OAAOZ,EAlDOa,CAAef,EAAMV,OAC/B0B,EAAW,GACNZ,EAAI,EAAGA,EAAIH,EAAMgB,OAAQb,IAChCY,EAASR,KACP,qBAAKtB,UAAU,cAAcC,MAAO,CAACC,oBAAoB,UAAD,OAAYQ,KAAKsB,KAAKtB,KAAKuB,KAAKnB,EAAMV,MAAM,IAA5C,WAAxD,SACE,cAAC8B,EAAD,CAAaC,MAAOpB,EAAMG,GAAIb,SAAUS,EAAMT,YADuEa,IAK3H,OAAOY,EAGT,SAASI,EAAYpB,GAEnB,IADA,IAAIsB,EAAW,GACNlB,EAAI,EAAGA,EAAIJ,EAAMqB,MAAMJ,OAAQb,IAAK,CAC3C,IAAImB,EAAiC,OAAnBvB,EAAMT,UAAqBS,EAAMT,WAAaS,EAAMqB,MAAMjB,GAAM,UAAY,UAC9FkB,EAASd,KACP,sBAAMtB,UAAU,cAAsBC,MAAO,CAACqC,MAAOD,GAArD,SAAmEvB,EAAMqB,MAAMjB,IAA5CA,IAGvC,OAAOkB,ECjDT,IAYeG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e83ce429.chunk.js","sourcesContent":["import './App.css';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { TextField, ThemeProvider } from '@material-ui/core';\nimport { useState } from 'react';\n\nconst gridW = 7; // dobble grid width\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  }\n});\n\nexport default function App() {\n  const [selectedNumber, setSelectedNumber] = useState(null);\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"container\">\n        <div className=\"dobble-grid\" style={{gridTemplateColumns: `repeat(${gridW}, 1fr)`}}>\n          <DobbleCards width={gridW} selected={selectedNumber}></DobbleCards>\n        </div>\n        <TextField value={selectedNumber || \"\"} onChange={e => {\n          setSelectedNumber(Math.min(parseInt(e.target.value), (gridW+1)*gridW-1) || null);\n        }}></TextField>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nfunction DobbleCards(props) {\n  const cards = generateDobble(props.width);\n  let cardsArr = [];\n  for (let i = 0; i < cards.length; i++) {\n    cardsArr.push(\n      <div className=\"dobble-card\" style={{gridTemplateColumns: `repeat(${Math.ceil(Math.sqrt(props.width+1))}, 2ch)`}} key={i}>\n        <DobbleIcons icons={cards[i]} selected={props.selected}></DobbleIcons>\n      </div>\n    );\n  }\n  return cardsArr; \n}\n\nfunction DobbleIcons(props) {\n  let iconsArr = [];\n  for (let i = 0; i < props.icons.length; i++) {\n    let iconColour = (props.selected === null || props.selected === props.icons[i]) ? \"#ffffff\" : \"#555555\";\n    iconsArr.push(\n      <span className=\"dobble-icon\" key={i} style={{color: iconColour}}>{props.icons[i]}</span>\n    );\n  }\n  return iconsArr;\n}\n\nfunction generateDobble(width) {\n  let arr = new Array(width*width);\n  for (let i = 0; i < width*width; i++) {\n    arr[i] = [];\n  }\n  for (let gradient = 0; gradient < width; gradient++) {\n    for (let startX = 0; startX < width; startX++) {\n      for (let y = 0; y < width; y++) {\n        let x = (startX+gradient*y) % width;\n        arr[y*width+x].push((gradient*width)+startX);\n      }\n    }\n  }\n  for (let y = 0; y < width; y++) {\n    for (let x = 0; x < width; x++) {\n      arr[y*width+x].push((width*width)+y);\n    }\n  }\n  for (let i = 0; i < width*width; i++) {\n    for (let j = i+1; j < width*width; j++) {\n      let matches = 0;\n      for (let k = 0; k < (width+1)*width; k++) {\n        if (arr[i].includes(k) && arr[j].includes(k)) matches++;\n      }\n      if (matches > 1) alert(\"AAAAAAAAAAAA\");\n    }\n  }\n  return arr;\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
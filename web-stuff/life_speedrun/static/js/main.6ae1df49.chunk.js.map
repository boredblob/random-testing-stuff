{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["initialWindowWidth","Math","min","floor","window","innerWidth","theme","createMuiTheme","palette","type","initialGridTypes","white_noise","res","arr","Array","y","x","random","blue_noise","pds","FastPoissonDiskSampling","shape","radius","tries","fill","points","p","length","every_7th_pixel","currentGrid","currentResolution","App","useState","initialGridType","setInitialGridType","resolution","setResolution","generateInitialGrid","grid","setGrid","running","setRunning","canvasRef","useRef","useEffect","ctx","current","getContext","putImageData","gridSize","data","createImageData","i","gridToImageData","ThemeProvider","className","ref","width","height","FormControl","variant","InputLabel","htmlFor","id","Select","color","labelId","label","value","onChange","e","target","MenuItem","Button","onClick","ms","initialGrid","start","document","timeline","currentTime","performance","now","scheduleFrame","time","elapsed","roundedElapsed","round","delay","setTimeout","requestAnimationFrame","newGrid","sum","sumNeighbours","cell","iterateLife","simulate","dx","dy","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6ae1df49.chunk.js","sourcesContent":["import './App.css';\nimport { ThemeProvider, Button, Select, MenuItem, InputLabel, FormControl } from '@material-ui/core'\nimport { createMuiTheme } from '@material-ui/core/styles'\nimport { useRef, useState, useEffect } from 'react';\nimport FastPoissonDiskSampling from 'fast-2d-poisson-disk-sampling';\n\nconst initialWindowWidth = Math.min(512, Math.floor(window.innerWidth));\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  }\n});\nconst initialGridTypes = {\n  white_noise: generateWhiteNoise,\n  blue_noise: generateBlueNoise,\n  every_7th_pixel: generateEvery7thPixel\n}\nlet currentGrid = null;\nlet currentResolution = null;\n\nfunction App() {\n  const [initialGridType, setInitialGridType] = useState(\"white_noise\");\n  const [resolution, setResolution] = useState(initialWindowWidth);\n  const [grid, setGrid] = useState(generateInitialGrid(\"white_noise\", resolution));\n  const [running, setRunning] = useState(false);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.putImageData(gridToImageData(ctx, grid, resolution), 0, 0);\n  }, [grid, resolution]);\n  useEffect(() => {\n    currentGrid = generateInitialGrid(initialGridType, resolution);\n    currentResolution = resolution;\n    setGrid(currentGrid);\n  }, [initialGridType, resolution]);\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"container\">\n        <canvas ref={canvasRef} width={resolution} height={resolution}></canvas>\n        <div className=\"controls\">\n        <FormControl className=\"select\"  variant=\"outlined\">\n            <InputLabel htmlFor=\"resolution-select\" id=\"resolution-select-label\">Resolution</InputLabel>\n            <Select color=\"primary\" labelId=\"resolution-select-label\" id=\"resolution-select\" label=\"Resolution\" value={resolution} onChange={e => {\n              if (typeof e.target.value === \"number\") setResolution(e.target.value);\n            }}>\n              <MenuItem value={Math.min(512, initialWindowWidth)}>Auto ({initialWindowWidth})</MenuItem>\n              <MenuItem value={64}>64</MenuItem>\n              <MenuItem value={128}>128</MenuItem>\n              <MenuItem value={256}>256</MenuItem>\n              <MenuItem value={512}>512</MenuItem>\n            </Select>\n          </FormControl>\n          <FormControl className=\"select\"  variant=\"outlined\">\n            <InputLabel htmlFor=\"initial-grid-select\" id=\"initial-grid-select-label\">Starting Grid</InputLabel>\n            <Select color=\"primary\" labelId=\"initial-grid-select-label\" id=\"initial-grid-select\" label=\"Starting Grid\" value={initialGridType} onChange={e => {\n              if (initialGridTypes[e.target.value]) setInitialGridType(e.target.value);\n            }}>\n              <MenuItem value={\"white_noise\"}>White Noise</MenuItem>\n              <MenuItem value={\"blue_noise\"}>Blue Noise</MenuItem>\n              <MenuItem value={\"every_7th_pixel\"}>Every 7th Pixel</MenuItem>\n            </Select>\n          </FormControl>\n        </div>\n        <Button variant=\"contained\" color=\"primary\" onClick={() => {\n          if (running) return;\n          simulate(1000/24, grid, setGrid, resolution);\n          setRunning(true);\n        }}>Simulate</Button>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n\nfunction simulate(ms, initialGrid, setGrid, gridSize) {\n  const start = document.timeline ? document.timeline.currentTime : performance.now();\n  currentGrid = initialGrid;\n  currentResolution = gridSize;\n  \n  function scheduleFrame(time) {\n    const elapsed = time - start;\n    const roundedElapsed = Math.round(elapsed / ms) * ms;\n    const targetNext = start + roundedElapsed + ms;\n    const delay = targetNext - performance.now();\n    setTimeout(() => requestAnimationFrame(() => {\n      currentGrid = iterateLife(currentGrid, currentResolution);\n      setGrid(currentGrid);\n      scheduleFrame(performance.now());\n    }), delay);\n  }\n\n  scheduleFrame(start);\n}\n\nfunction generateInitialGrid(initialGridType, res) {\n  return initialGridTypes[initialGridType](res);\n}\n\nfunction generateWhiteNoise(res) {\n  let arr = Array(res*res);\n  for (let y = 0; y < res; y++) {\n    for (let x = 0; x < res; x++) {\n      arr[y*res+x] = Math.random() < 0.07;\n    }\n  }\n  return arr;\n}\n\nfunction generateEvery7thPixel(res) {\n  let arr = Array(res*res);\n  for (let y = 0; y < res; y++) {\n    for (let x = 0; x < res; x++) {\n      arr[y*res+x] = (y*res+x)%7 === 0;\n    }\n  }\n  return arr;\n}\n\nfunction generateBlueNoise(res) {\n  let pds = new FastPoissonDiskSampling({\n    shape: [res, res],\n    radius: 2,\n    tries: 30\n  });\n  let arr = Array(res*res).fill(false);\n  let points = pds.fill();\n  for (let p = 0; p < points.length; p++) {\n    arr[Math.floor(points[p][1])*res+Math.floor(points[p][0])] = true;\n  }\n  return arr;\n}\n\nfunction iterateLife(grid, gridSize) {\n  let newGrid = Array(gridSize*gridSize);\n  for (let y = 0; y < gridSize; y++) {\n    for (let x = 0; x < gridSize; x++) {\n      const sum = sumNeighbours(grid, gridSize, x, y);\n      const cell = grid[y*gridSize+x];\n      if (cell) {\n        newGrid[y*gridSize+x] = (sum === 2 || sum === 3);\n      } else {\n        newGrid[y*gridSize+x] = (sum === 3);\n      }\n    }\n  }\n  return newGrid;\n}\n\nfunction sumNeighbours(grid, gridSize, dx, dy) {\n  let sum = 0;\n  for (let y = dy-1; y < dy+2; y++) {\n    for (let x = dx-1; x < dx+2; x++) {\n      let cx = ((x % gridSize) + gridSize) % gridSize;\n      let cy = ((y % gridSize) + gridSize) % gridSize;\n      sum += grid[cy*gridSize+cx];\n    }\n  }\n  return sum - grid[dy*gridSize+dx];\n}\n\nfunction gridToImageData(ctx, grid, gridSize) {\n  const data = ctx.createImageData(gridSize, gridSize);\n  for (let y = 0; y < gridSize; y++) {\n    for (let x = 0; x < gridSize; x++) {\n      let i = y*gridSize+x;\n      data.data[4*i+0] = grid[i]*255;\n      data.data[4*i+1] = grid[i]*255;\n      data.data[4*i+2] = grid[i]*255;\n      data.data[4*i+3] = 255;\n    }\n  }\n  return data;\n}\n\n// function generateBlueNoise(res) {\n//   let arr = Array(res*res).fill(false);\n//   const samples = 100;\n//   const m = 1;\n//   let x = Math.floor(Math.random() * res);\n//   let y = Math.floor(Math.random() * res);\n//   arr[y*res+x] = true;\n//   for (let i = 0; i < samples; i++) {\n//     let candidatesArr = [];\n//     let distancesArr = [];\n//     for (let j = 0; j < i*m+1; j++) {\n//       const cx = Math.floor(Math.random() * res);\n//       const cy = Math.floor(Math.random() * res);\n//       const distance = toroidalDistance(x, y, cx, cy);\n//       candidatesArr.push([cx, cy]);\n//       distancesArr.push(distance);\n//     }\n//     [x, y] = candidatesArr[indexOfMax(distancesArr)];\n//     arr[y*res+x] = true;\n//   }\n//   return arr;\n// }\n\n// function indexOfMax(arr) {\n//   let maxIndex = 0, maxValue = 0;\n//   for (let i = 0; i < arr.length; i++) {\n//     if (arr[i] > maxValue) {\n//       maxIndex = i;\n//       maxValue = arr[i];\n//     }\n//   }\n//   return maxIndex;\n// }\n\n// function toroidalDistance(x1, y1, x2, y2) {\n//   let dx = Math.abs(x2 - x1);\n//   let dy = Math.abs(y2 - y1);\n  \n//   if (dx > 0.5) dx = 1 - dx;\n//   if (dy > 0.5) dy = 1 - dy;\n  \n//   return dx*dx + dy*dy;\n// }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}